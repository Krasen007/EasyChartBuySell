@page "/"
@inject HttpClient Http
@using EasyChartBuySell.Controllers
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib

<h1>Hello, world!</h1>
<h4>Current ETH price is @ethPrice USD</h4>

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="lc.config" @bind-Layout="lc.layout" @bind-Data="lc.data"
    @ref="lc.chart" />

<div class="text-right">
    <form class="form-inline">
        <label>Buy Amount</label>
        <input class="form-control" type="text" id="amount" @bind-value="@buyAmount" />
        <label>Buy Price</label>
        <input class="form-control" type="text" id="amount" @bind-value="@buyPrice" />
        <input class="form-control" type="datetime-local" id="date" @bind-value="@dateBought" />
        <button type="button" class="btn btn-primary" @onclick="() => AddNewData()">Add Buy Amount</button>
        <button type="button" class="btn btn-primary" @onclick="() => BuyMoreData()">Buy More Amount</button>
        <button type="button" class="btn btn-primary" @onclick="() => lc.chart.Clear()">Clear</button>
    </form>
</div>

<PlotlyChart Id="Asset Bar Chart" Config="bc.barConfig" Layout="bc.barLayout" Data="bc.barData" @ref="bc.barChart"/>

@* Bar chart class base*@
@code
{
    BarChart bc = new BarChart();
}

@* Line chart class base *@
@code
{
    LineChart lc = new LineChart();    
}

@* Business logic *@
@code
{
    string ethPrice;
    private async Task ShowData(int count = 100)
    {
        if (!(lc.chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var parsedData = await Http.GetStringAsync("Data/eth.txt");

        List<string> dataList = parsedData.Split(new[] { "\r\n" }, StringSplitOptions.None)
        .ToList();

        ethPrice = dataList[dataList.Count-2]; // Its -2 because the last item is empty space
        await InvokeAsync(() => StateHasChanged());

        var x = new List<object>();
        var y = new List<object>();

        foreach (var item in dataList)
        {
            y.Add(item);
        }

        var startDate = new DateTime(2021, 5, 14, 18, 0, 0);
        var time = 0;
        for (int i = 0; i < dataList.Count; i++)
        {
            x.Add(startDate);
            startDate = startDate.AddHours(1);
            time++;
            if (time == 24)
            {
                time = 0;
            }
        }

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await lc.chart.React();
        }
        else
        {
            await lc.chart.ExtendTrace(x, y, lc.data.IndexOf(scatter));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ShowData();
        }
    }

    double buyPrice = 0;
    double buyAmount = 0;

    DateTime dateBought = DateTime.Now;

    IList<ITrace> buyData = new List<ITrace>
    {
        new Scatter
        {
            Name = "Buy",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = new List<object>(),
            Y = new List<object>()
        }
    };
    private async Task AddNewData()
    {
        var x = new List<object>();
        var y = new List<object>();

        // Buy price 
        y.Add(buyPrice);

        // At time
        x.Add(dateBought);

        var scatter = new Scatter
        {
            Name = $"Time Bought{buyData.Count + 1}",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = x,
            Y = y,
        };

        await lc.chart.AddTrace(scatter);//x, y, data.IndexOf(scatter));

        // Buy amount
        bc.barData.Add(new Bar
        {
            X = new List<object> {"ETH"},
            Y = new List<object> {buyAmount},
            Name = "Bought ETH at " + dateBought
        });

        await bc.barChart.React();
    }
    private async Task BuyMoreData()
    {
        var x = new List<object>();
        var y = new List<object>();

        // Buy amount
        y.Add(buyPrice);

        // At time
        x.Add(dateBought);

        var scatter = new Scatter
        {
            Name = $"Time Bought{buyData.Count + 1}",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = x,
            Y = y,
        };

        await lc.chart.ExtendTrace(x, y, lc.data.IndexOf(scatter));

        bc.barData.Add(new Bar
        {
            X = new List<object> {"ETH"},
            Y = new List<object> {buyAmount},
            Name = "Bought ETH at " + dateBought
        });

        await bc.barChart.React();
    }
}