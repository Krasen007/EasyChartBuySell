@page "/"
@inject HttpClient Http
@using EasyChartBuySell.Controllers
@using Plotly.Blazor
@inject IJSRuntime JSRuntime

<h1>Hello, world!</h1>


<PlotlyChart style="height: 90vh; min-height: 350px" @bind-Config="lc.config" @bind-Layout="lc.layout"
    @bind-Data="lc.data" @ref="lc.chart" />

<div class="text-right">
    <form class="form-inline">
        <label>Buy Amount</label>
        <input class="form-control" type="number" id="amount" @bind-value="@buyAmount" />
        <label>Buy Price</label>
        <input class="form-control" type="number" id="amount" @bind-value="@buyPrice" />
        <input class="form-control" type="datetime-local" id="date" @bind-value="@dateBought" />
        <button type="button" class="btn btn-primary" @onclick="() => AddUserColorDataChartBtn()">Add Buy
            Amount</button>
        <button type="button" class="btn btn-primary" @onclick="() => lc.chart.Clear()">Clear</button>
    </form>
</div>

@* <input class="form-control" @bind="currentInputValue" />
<button class="btn btn-secondary" @onclick="Save">Save</button>
<button class="btn btn-secondary" @onclick="Read">Read</button>
<button class="btn btn-secondary" @onclick="Delete">Delete</button> *@

<PlotlyChart Id="Asset Bar Chart" Config="bc.barConfig" Layout="bc.barLayout" Data="bc.barDataTrace"
    @ref="bc.barChart" />

<h4 class="d-flex justify-content-center">Current ETH price is @currentPrice USD, and you have @tempAmount which is
    equal to @tempUserValue</h4>
<br>

@* @code {
string currentInputValue;

  public async Task Save()
  {
    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "name", currentInputValue);
  }

  public async Task Read()
  {
    currentInputValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "name");
  }

  public async Task Delete()
  {
    await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "name");
  }
} *@

@* Create charts*@
@code
{
    BarChart bc = new BarChart();
    LineChart lc = new LineChart();
}

@* Business logic *@
@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderChart();
        }
    }

    string currentPrice;
    private async Task RenderChart()
    {
        var getData = await Http.GetStringAsync("Data/eth.txt");

        List<string> parsedDataList = getData.Split(new[] { "\r\n" }, StringSplitOptions.None)
        .ToList();
        await lc.ShowData(parsedDataList);

        currentPrice = parsedDataList[parsedDataList.Count - 2]; // Its -2 because the last item is empty space
        await InvokeAsync(() => StateHasChanged());
    }

    double buyPrice = 0;
    double buyAmount = 0;
    DateTime dateBought = DateTime.Now;

    bool firstTimeRun = true;
    double tempAmount = 0;
    double tempUserValue = 0;

    private async Task AddUserColorDataChartBtn()
    {
        if (firstTimeRun)
        {
            await lc.AddUserData(buyPrice, buyAmount, dateBought, firstTimeRun);
            await bc.BuyIncreaseBarChart(buyAmount, dateBought);
            firstTimeRun = false;
        }
        else
        {
            await lc.AddUserData(buyPrice, buyAmount, dateBought, firstTimeRun);
            await bc.BuyIncreaseBarChart(buyAmount, dateBought);
        }
        tempAmount += buyAmount;

        // this is hacked, because the incoming data is not parsed correctly
        tempUserValue = Convert.ToDouble(currentPrice.TrimEnd('"').TrimStart('"')) * tempAmount;
    }
}