@page "/"
@using EasyChartBuySell
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.XAxisLib
@using Plotly.Blazor.Traces.CandlestickLib
@using Plotly.Blazor.Traces.ScatterLib
@using Line = Plotly.Blazor.Traces.CandlestickLib.DecreasingLib.Line

<h1>Hello, world!</h1>

Welcome to your new app.

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

<div class="text-right">
    <button type="button" class="btn btn-primary" @onclick="() => chart.Clear()">Clear</button>
    @* <button type="button" class="btn btn-primary" @onclick="() => DeleteScatter()">Pop</button> *@
    <button type="button" class="btn btn-primary" @onclick="() => AddScatter()">AddScatter</button>
    @*<button type="button" class="btn btn-primary" @onclick="() => Restyle()">Rename First</button>
    <button type="button" class="btn btn-primary" @onclick="() => PrependData()">Prepend First</button> *@
    <button type="button" class="btn btn-primary" @onclick="() => ExtendData()">Extend Data</button>
    @* <button type="button" class="btn btn-primary" @onclick="() => PrependWithLimit()">Prepend First (Max. 100)</button>
    <button type="button" class="btn btn-primary" @onclick="() => ExtendWithLimit()">Extend First (Max. 100)</button> *@
</div>

Read the @news.

@code
{
    public string news = "string";

    PlotlyChart chart;

    Config config = new Config
    {
        Responsive = true
    };

    Layout layout = new Layout
    {
        Title = new Plotly.Blazor.LayoutLib.Title
        {
            Text = "Scatter"
        },
        YAxis = new List<YAxis>
    {
            new YAxis
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                    Text = "Scatter Unit"
                }
            }
        }
    };

    IList<ITrace> data = new List<ITrace>{
        new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,   
            X = new List<object>(), 
            Y = new List<object>()
        }
    };

    private async Task ExtendData(int count = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;
        
        var x = new List<object>();
        var y = new List<object>();

        y.Add(300);
        y.Add(309);
        y.Add(350);
        y.Add(355);
        y.Add(320);

        x.Add(new DateTime(2021, 5, 14, 12, 0, 0));
        x.Add(new DateTime(2021, 5, 14, 13, 0, 0));
        x.Add(new DateTime(2021, 5, 15));
        x.Add(new DateTime(2021, 5, 16));
        x.Add(new DateTime(2021, 5, 17));

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ExtendData();
        }
    }

    private async Task AddScatter()
    {
        @* var (x, y) = Helper.GenerateData(0,100); *@
        var x = new List<object>();
        var y = new List<object>();

        y.Add(320);
        y.Add(370);
        y.Add(389);
        y.Add(370);
        y.Add(355);
        y.Add(380);

        x.Add(new DateTime(2021, 5, 17));
        x.Add(new DateTime(2021, 5, 18));
        x.Add(new DateTime(2021, 5, 19));
        x.Add(new DateTime(2021, 5, 20));
        x.Add(new DateTime(2021, 5, 21));
        x.Add(new DateTime(2021, 5, 22));

        await chart.AddTrace(new Scatter
        {

            Name = $"ScatterTrace{data.Count+1}",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = x,
            Y = y
        });
    }
}