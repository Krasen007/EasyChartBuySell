@page "/"
@inject HttpClient Http
@using EasyChartBuySell
@using EasyChartBuySell.Controllers
@using Plotly.Blazor
@inject IJSRuntime JSRuntime

@* Start of page *@

<PlotlyChart style="height: 90vh; min-height: 350px" @bind-Config="lc.config" @bind-Layout="lc.layout"
    @bind-Data="lc.data" @ref="lc.chart" />

<div class="container">
    <div class="row">
        <div class="col-sm">
            <label>Buy Amount</label>
            <input class="form-control" type="number" id="amount" @bind-value="@cStruct.buyAmount" />
        </div>
        <div class="col-sm">
            <label>Buy Price</label>
            <input class="form-control" type="number" id="amount" @bind-value="@cStruct.buyPrice" />
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <label>Date</label>
            <input class="form-control" type="datetime-local" id="date" @bind-value="@cStruct.dateBought" />
        </div>
    </div>
    <div class="row">
        <label><br></label>
        <div class="col-sm">
            <button type="button" class="btn btn-primary" @onclick="() => AddUserColorDataChartBtn()">Add Buy
                Amount</button>
            <button type="button" class="btn btn-warning" @onclick="() => AddUserColorDataChartBtn()">Add Sell
                Amount</button>
            <button type="button" class="btn btn-primary" @onclick="() => Delete()">Remove last item</button>
        </div>
    </div>
    <label><br></label>
</div>

<PlotlyChart Id="Asset Bar Chart" Config="bc.barConfig" Layout="bc.barLayout" Data="bc.barDataTrace"
    @ref="bc.barChart" />

<h4 class="d-flex justify-content-center">Current ETH price is @currentPrice USD, and you have @tempAmount which is
    equal to @tempUserValue</h4>
<br>  

@* Create charts*@
@code
{
    BarChart bc = new BarChart();
    LineChart lc = new LineChart();
    string currentPrice;
    double buyPrice = 0;
    double buyAmount = 0;
    DateTime dateBought = DateTime.Now;
    bool userHasSavedData = false;
    double tempAmount = 0;
    double tempUserValue = 0;

    Helper.ChartStruct cStruct = new Helper.ChartStruct {
        buyPrice = 0,
        buyAmount = 0,
        dateBought = DateTime.Now
    };

    // test
                         
}

@* Local Storage*@
@code { 
    public async Task Save()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "buyPrice", buyPrice);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "buyAmount", buyAmount);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "dateBought", dateBought);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userHasSavedData", userHasSavedData);
        // todo add to work with bar chart aswell

        System.Console.WriteLine("Saved in local storage " + buyPrice);        
    }

    public async Task ReadLocalStorage()
    {
        if (userHasSavedData)
        {
            buyPrice = Convert.ToDouble(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "buyPrice"));
            buyAmount = Convert.ToDouble(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "buyAmount"));
            dateBought = DateTime.Parse(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "dateBought"));
        }

        System.Console.WriteLine("Read from local storage " + buyPrice);
    }

    public async Task Delete()
    {
        await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "buyPrice");
        await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "buyAmount");
        await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "dateBought");
        await JSRuntime.InvokeAsync<string>("localStorage.removeItem", "userHasSavedData");

        System.Console.WriteLine("Items removed from local storage " + buyPrice);
    }
}

@* Business logic *@
@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userHasSavedData = Convert.ToBoolean(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userHasSavedData"));
            System.Console.WriteLine(userHasSavedData);
            await RenderChart();
        }
    }

    private async Task RenderChart()
    {
        var getData = await Http.GetStringAsync(Helper.ethPath);
        List<string> parsedDataList = getData.Split(new[] { "\r\n" }, StringSplitOptions.None)
        .ToList();
        await lc.ShowChartData(parsedDataList);

        if (userHasSavedData)
        {
            await ReadLocalStorage();
            await lc.RenderSavedUserData(buyPrice, buyAmount, dateBought);
            await bc.RenderSavedBarUserData(buyAmount, dateBought);
        }

        currentPrice = parsedDataList[parsedDataList.Count - 2]; // Its -2 because the last item is empty space
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task AddUserColorDataChartBtn()
    {
        if (!userHasSavedData)
        {            
            await lc.AddUserData(cStruct, userHasSavedData); //buyPrice, buyAmount, dateBought, userHasSavedData);
            await bc.BuyIncreaseBarChart(buyAmount, dateBought);
            userHasSavedData = true;
        }
        else
        {
            await lc.AddUserData(buyPrice, buyAmount, dateBought, userHasSavedData);
            await bc.BuyIncreaseBarChart(buyAmount, dateBought);
        }

        tempAmount += buyAmount;

        // this is hacked, because the incoming data is not parsed correctly
        tempUserValue = Convert.ToDouble(currentPrice.TrimEnd('"').TrimStart('"')) * tempAmount;
        await Save();
    }
}