@page "/"
@using EasyChartBuySell
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.LayoutLib.XAxisLib
@using Plotly.Blazor.Traces.CandlestickLib
@using Plotly.Blazor.Traces.ScatterLib
@using Line = Plotly.Blazor.Traces.CandlestickLib.DecreasingLib.Line

<h1>Hello, world!</h1>

Welcome to your new app.


@* <PlotlyChart Id="TestId" Config="config" Layout="layout" Data="data" @ref="chart"/> *@

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data" @ref="chart" />

@* @code
{
    PlotlyChart chart;

    Config config = new Config
    {
        Responsive = true
    };

    Layout layout = new Layout
    {
        DragMode = DragModeEnum.Zoom,
        Margin = new Margin
        {
            R = 10,
            T = 25,
            B = 40,
            L = 60
        },
        ShowLegend = true,
        Title = new Plotly.Blazor.LayoutLib.Title
        {
            Text = "Candlestick"
        },
        XAxis = new List<XAxis>
        {
            new XAxis
            {
                AutoRange = AutoRangeEnum.True,
                Domain = new List<object> {0, 1},
                Range = new List<object> {"2021-05-14 12:00", "2021-05-17 12:00"},
                RangeSlider = new RangeSlider
                {
                    Range = new object[] {"2021-05-14 12:00", "2017-05-15 12:00"}
                },
                Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title
                {
                    Text = "Date"
                },
                Type = TypeEnum.Date
            }
        },
        YAxis = new List<YAxis>
        {
            new YAxis
            {
                AutoRange = Plotly.Blazor.LayoutLib.YAxisLib.AutoRangeEnum.True,
                Domain = new List<object> {0, 1},
                Range = new List<object> {114.609999778, 137.410004222},
                Type = Plotly.Blazor.LayoutLib.YAxisLib.TypeEnum.Linear
            }
        },
        Height = 500
    };

    List<ITrace> data = new List<ITrace>
    {
        new Candlestick
        {
            X = new List<object> {
                new DateTime(2021, 5, 14),
                new DateTime(2021, 5, 15),
                new DateTime(2021, 5, 16),
                new DateTime(2021, 5, 17)
                },
            Close = new List<object> {
                4012.500,
                4200,
                4155.3323,
                3909.111122222},
            Decreasing = new Decreasing
            {
                Line = new Line
                {
                    Color = "#7F7F7F"
                }
            },
            High = new List<object> { 
                4001.500,
                4200,
                4155.3323,
                3909.111122222},
            Increasing = new Increasing
            {
                Line = new Plotly.Blazor.Traces.CandlestickLib.IncreasingLib.Line
                {
                    Color = "rgba(31,119,180,1)"
                }
            },
            Low = new List<object> {
                4001.500,
                4200,
                4155.3323,
                3909.111122222},
            Open = new List<object> {
                4001.500,
                4200,
                4155.3323,
                3909.111122222},
            XAxis = "x",
            YAxis = "y"
                
            @* X = new List<object> {new DateTime(2017, 1, 4), new DateTime(2017, 1, 5), new DateTime(2017, 1, 6), new DateTime(2017, 1, 9), new DateTime(2017, 1, 10), new DateTime(2017, 1, 11), new DateTime(2017, 1, 12), new DateTime(2017, 1, 13), new DateTime(2017, 1, 17), new DateTime(2017, 1, 18), new DateTime(2017, 1, 19), new DateTime(2017, 1, 20), new DateTime(2017, 1, 23), new DateTime(2017, 1, 24), new DateTime(2017, 1, 25), new DateTime(2017, 1, 26), new DateTime(2017, 1, 27), new DateTime(2017, 1, 30), new DateTime(2017, 1, 31), new DateTime(2017, 2, 1), new DateTime(2017, 2, 2), new DateTime(2017, 2, 3), new DateTime(2017, 2, 6), new DateTime(2017, 2, 7), new DateTime(2017, 2, 8), new DateTime(2017, 2, 9), new DateTime(2017, 2, 10), new DateTime(2017, 2, 13), new DateTime(2017, 2, 14), new DateTime(2017, 2, 15)},
            Close = new List<object> {116.019997, 116.610001, 117.910004, 118.989998, 119.110001, 119.75, 119.25, 119.040001, 120, 119.989998, 119.779999, 120, 120.080002, 119.970001, 121.879997, 121.940002, 121.949997, 121.629997, 121.349998, 128.75, 128.529999, 129.080002, 130.289993, 131.529999, 132.039993, 132.419998, 132.119995, 133.289993, 135.020004, 135.509995},
            Decreasing = new Decreasing
            {
                Line = new Line
                {
                    Color = "#7F7F7F"
                }
            },
            High = new List<object> {116.510002, 116.860001, 118.160004, 119.43, 119.379997, 119.93, 119.300003, 119.620003, 120.239998, 120.5, 120.089996, 120.449997, 120.809998, 120.099998, 122.099998, 122.440002, 122.349998, 121.629997, 121.389999, 130.490005, 129.389999, 129.190002, 130.5, 132.089996, 132.220001, 132.449997, 132.940002, 133.820007, 135.089996, 136.270004},
            Increasing = new Increasing
            {
                Line = new Plotly.Blazor.Traces.CandlestickLib.IncreasingLib.Line
                {
                    Color = "rgba(31,119,180,1)"
                }
            },
            Low = new List<object> {115.75, 115.809998, 116.470001, 117.940002, 118.300003, 118.599998, 118.209999, 118.809998, 118.220001, 119.709999, 119.370003, 119.730003, 119.769997, 119.5, 120.279999, 121.599998, 121.599998, 120.660004, 120.620003, 127.010002, 127.779999, 128.160004, 128.899994, 130.449997, 131.220001, 131.119995, 132.050003, 132.75, 133.25, 134.619995},
            Open = new List<object> {115.849998, 115.919998, 116.779999, 117.949997, 118.769997, 118.739998, 118.900002, 119.110001, 118.339996, 120, 119.400002, 120.449997, 120, 119.550003, 120.419998, 121.669998, 122.139999, 120.93, 121.150002, 127.029999, 127.980003, 128.309998, 129.130005, 130.539993, 131.350006, 131.649994, 132.460007, 133.080002, 133.470001, 135.520004},
            XAxis = "x",
            YAxis = "y" *@


<div class="text-right">
    <button type="button" class="btn btn-primary" @onclick="() => chart.Clear()">Clear</button>
    @* <button type="button" class="btn btn-primary" @onclick="() => DeleteScatter()">Pop</button> *@
    <button type="button" class="btn btn-primary" @onclick="() => AddScatter()">AddScatter</button>
    @* <button type="button" class="btn btn-primary" @onclick="() => Restyle()">Rename First</button>
    <button type="button" class="btn btn-primary" @onclick="() => PrependData()">Prepend First</button>
    <button type="button" class="btn btn-primary" @onclick="() => ExtendData()">Extend First</button>
    <button type="button" class="btn btn-primary" @onclick="() => PrependWithLimit()">Prepend First (Max. 100)</button>
    <button type="button" class="btn btn-primary" @onclick="() => ExtendWithLimit()">Extend First (Max. 100)</button> *@
</div>

@code
{
    PlotlyChart chart;

    Config config = new Config
    {
        Responsive = true
    };

    Layout layout = new Layout
    {
        Title = new Plotly.Blazor.LayoutLib.Title
        {
            Text = "Scatter"
        },
        YAxis = new List<YAxis>
    {
            new YAxis
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                    Text = "Scatter Unit"
                }
            }
        }
    };

    IList<ITrace> data = new List<ITrace>{
        new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,   
            X = new List<object>(), 
            Y = new List<object>()
        }
    };

    @* private async Task ExtendData(int count = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var max = (int?)scatter.X?.Max();
        var (x, y) = Helper.GenerateData(max + 1 ?? 0, max + 1 + count ?? count);


        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }
    } *@

    @* private async Task ExtendWithLimit(int count = 100, int limit = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var max = (int?)scatter.X?.Max();
        var (x, y) = Helper.GenerateData(max + 1 ?? 0, max + 1 + count ?? count);


        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter), limit);
        }
    } *@

    @* private async Task PrependWithLimit(int count = 100, int limit = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var min = (int?)scatter.X?.Min();
        var (x, y) = Helper.GenerateData(min - 1 ?? 0, min - 1 - count ?? count * -1);

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.PrependTrace(x, y, data.IndexOf(scatter), limit);
        }
    } *@

    @* private async Task PrependData(int count = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var min = (int?)scatter.X?.Min();
        var (x, y) = Helper.GenerateData(min - 1 ?? 0, min - 1 - count ?? count * -1);

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.PrependTrace(x, y, data.IndexOf(scatter));
        }
    } *@

    @* protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ExtendData();
        }
    } *@

    @* private async Task Restyle()
    {
        var updateScatterChart = new Scatter
        {
            Name = "Restyled Name"
        };
        await chart.Restyle(updateScatterChart, 0);
    } *@

    @* private async Task DeleteScatter()
    {
        await chart.DeleteTrace(0);
    } *@

    private async Task AddScatter()
    {
        @* var (x, y) = Helper.GenerateData(0,100); *@
        var x = new List<object>();
        var y = new List<object>();

        y.Add(300);
        y.Add(350);
        y.Add(355);
        y.Add(320);


        x.Add(new DateTime(2021, 5, 14));
        x.Add(new DateTime(2021, 5, 15));
        x.Add(new DateTime(2021, 5, 16));
        x.Add(new DateTime(2021, 5, 17));




        await chart.AddTrace(new Scatter
        {

            Name = $"ScatterTrace{data.Count+1}",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = x,
            Y = y
        });
    }
}