@page "/bitcoin"
@inject HttpClient Http
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces.ScatterLib

<h1>Hello, </h1>
<h3>Here are 1 hour average BTC price provided data from blockchain.com</h3>
<h4>Current price is @btcPrice USD</h4>

<PlotlyChart style="height: 60vh; min-height: 350px" @bind-Config="config" @bind-Layout="layout" @bind-Data="data"
    @ref="chart" />

@code
{
    PlotlyChart chart;

    Config config = new Config
    {
        Responsive = true
    };

    Layout layout = new Layout
    {
        Title = new Plotly.Blazor.LayoutLib.Title
        {
            Text = "BTC 1 Hour Chart"
        },
        YAxis = new List<YAxis>
        {
            new YAxis
            {
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                Text = "USD Price"
                }
            }
        }
    };

    IList<ITrace> data = new List<ITrace>
    {
        new Scatter
        {
            Name = "ScatterTrace",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
            X = new List<object>(),
            Y = new List<object>()
        }
    };
}

@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ExtendData();
        }
    }

    string btcPrice;
    private async Task ExtendData(int count = 100)
    {
        if (!(chart.Data.FirstOrDefault() is Scatter scatter)) return;

        var parsedData = await Http.GetStringAsync("Data/btc.txt");

        List<string> dataList = parsedData.Split(new[] { "\r\n" }, StringSplitOptions.None)
        .ToList();

        btcPrice = dataList[dataList.Count-2]; // Its -2 because the last item is empty space
        await InvokeAsync(() => StateHasChanged());

        var x = new List<object>();
        var y = new List<object>();

        foreach (var item in dataList)
        {
            y.Add(item);
        }

        var startDate = new DateTime(2021, 5, 11, 6, 0, 0); // Warning - this is hardcoded with the recieving data from blockcain.com
        var time = 0;
        for (int i = 0; i < dataList.Count; i++)
        {
            x.Add(startDate);
            startDate = startDate.AddHours(2);
            time++;
            if (time == 24)
            {
                time = 0;
            }
        }

        if (!scatter.X.Any() || !scatter.Y.Any())
        {
            scatter.X.AddRange(x);
            scatter.Y.AddRange(y);
            await chart.React();
        }
        else
        {
            await chart.ExtendTrace(x, y, data.IndexOf(scatter));
        }
    }
}